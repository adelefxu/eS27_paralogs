#      + theme_classic()
#      + theme(legend.position='none'))
dev.off()
}
head(rownames(l12_umi_norm))
head(l12_genes)
# calculate correlations for AVDs: Rps27l normalized umis vs other genes' umis
# calculate correlations based on Rps27l stoichiometry relative to RP genes, rather than normalized UMIs. OK to use l12_umi_norm for this, since the normalizing denominator cancels out anyway. For the other genes, still using normalized UMIs. Also not limiting to AVPs for now
l12_sum_all_rp_transcripts = colSums(l12_umi_norm[rownames(l12_umi_norm) %in% rp_annotation_names,])
l12_rps27l_stoichiometry = l12_umi_norm["Rps27l",]/l12_sum_all_rp_transcripts * 100 #normalized UMI for Rps27l divided by normalized UMI for all active genes
# among only avds
cor_rps27l_stoichiometry_avd = data.frame(gene_name = rownames(l12_umi_norm),
ensembl_id = l12_genes$ensembl,
spearman_rho = rep(NA, nrow(l12_umi_norm)),
p_value = rep(NA, nrow(l12_umi_norm)))
for (i in 1:nrow(l12_umi_norm)) {
if (i %% 1000 == 0) {
print(i)
}
if (sum(l12_umi_norm[i,cell_annotation$is_avd]) > 0) {
result = cor.test(l12_rps27l_stoichiometry[cell_annotation$is_avd],
l12_umi_norm[i,cell_annotation$is_avd],
alternative = "two.sided",
method="spearman",
exact = FALSE)
cor_rps27l_stoichiometry_avd[i,] = c(rownames(l12_umi_norm)[i], result$estimate, result$p.value)
}
}
# calculate correlations for AVDs: Rps27l normalized umis vs other genes' umis
# calculate correlations based on Rps27l stoichiometry relative to RP genes, rather than normalized UMIs. OK to use l12_umi_norm for this, since the normalizing denominator cancels out anyway. For the other genes, still using normalized UMIs. Also not limiting to AVPs for now
l12_sum_all_rp_transcripts = colSums(l12_umi_norm[rownames(l12_umi_norm) %in% rp_annotation_names,])
l12_rps27l_stoichiometry = l12_umi_norm["Rps27l",]/l12_sum_all_rp_transcripts * 100 #normalized UMI for Rps27l divided by normalized UMI for all active genes
# among only avds
cor_rps27l_stoichiometry_avd = data.frame(gene_name = rownames(l12_umi_norm),
spearman_rho = rep(NA, nrow(l12_umi_norm)),
p_value = rep(NA, nrow(l12_umi_norm)))
for (i in 1:nrow(l12_umi_norm)) {
if (i %% 1000 == 0) {
print(i)
}
if (sum(l12_umi_norm[i,cell_annotation$is_avd]) > 0) {
result = cor.test(l12_rps27l_stoichiometry[cell_annotation$is_avd],
l12_umi_norm[i,cell_annotation$is_avd],
alternative = "two.sided",
method="spearman",
exact = FALSE)
cor_rps27l_stoichiometry_avd[i,] = c(rownames(l12_umi_norm)[i], result$estimate, result$p.value)
}
}
cor_rps27l_stoichiometry_avd$ensembl_id = l12_umi_norm$ensembl
cor_rps27l_stoichiometry_avd$ensembl_id = l12_umi_norm[,'ensembl']
cor_rps27l_stoichiometry_avd$ensembl_id = l12_genes[,'ensembl']
write.csv(cor_rps27l_stoichiometry_avd[!is.na(cor_rps27l_stoichiometry_avd$spearman_rho),], file = file.path(output_dir, "S27L_stoich_correlations_to_norm_umi_spearman.csv"), quote=FALSE)
cor_rps27l_stoichiometry_avd$ensembl_id = l12_genes[,'ensembl']
write.csv(cor_rps27l_stoichiometry_avd[!is.na(cor_rps27l_stoichiometry_avd$spearman_rho),], file = file.path(output_dir, "S27L_stoich_correlations_to_norm_umi_spearman.csv"), quote=FALSE)
gc()
rm(list=ls())
### PACKAGES
library(gplots)
library(ggplot2)
library(stats)
library(matrixStats)
library(grDevices)
library(RColorBrewer)
library(Matrix)
library(matrixStats)
### DIRECTORIES
root_dir = "/Users/adelexu/Google Drive/PhD/S27L_manuscript/source_data/analysis_plotting_code"
project_dir = file.path(root_dir, "bach_single_cell_mammary")
input_dir = file.path(project_dir, "data")
output_dir = file.path(project_dir, "results")
### INPUT FILES
gene_annotation_file = file.path(input_dir, "gene_annotation_GRCm38.88.csv")
l1_umi_file = file.path(input_dir, "GSM2834502_L_1_matrix.mtx")
l2_umi_file = file.path(input_dir, "GSM2834503_L_2_matrix.mtx")
l1_barcode_file = file.path(input_dir, "GSM2834502_L_1_barcodes.tsv")
l2_barcode_file = file.path(input_dir, "GSM2834503_L_2_barcodes.tsv")
l1_genes_file = file.path(input_dir, "GSM2834502_L_1_genes.tsv")
l2_genes_file = file.path(input_dir, "GSM2834503_L_2_genes.tsv")
rp_annotation_file = file.path(input_dir, "rp_annotation.tsv")
### READ INPUT
gene_annotation = read.csv(gene_annotation_file, header=TRUE)
# separate out mitochondrial genes
mito_genes = gene_annotation[gene_annotation$Chromosome.scaffold.name=="MT","Gene.stable.ID"] #37 genes, consistent w/ expectations -- but 2 are rRNAs and 22 are tRNAs, so only expect 13 mRNAs
# using L1 dataset GSM2834502 to figure out how matrix format works
l1_umi = as.matrix(readMM(l1_umi_file)) #124.8 Mb unzipped, took < 1 min to read. returns Large dgTMatrix, 152.7 Mb --> if coerced to regular matrix by as.matrix, 1.2 Gb
dim(l1_umi) # 27998  5906
l1_barcodes = paste("l1.", read.table(l1_barcode_file)$V1, sep="") #5906 entries
l1_genes = read.table(l1_genes_file) #27998 entries, gene_annotation IDs & gene names
colnames(l1_genes) = c("ensembl", "gene_name")
l2_umi = as.matrix(readMM(l2_umi_file))
dim(l2_umi) # 27998  3697
l2_barcodes = paste("l2.", read.table(l2_barcode_file)$V1, sep="") #3697 entries
l2_genes = read.table(l1_genes_file) #27998 entries, gene_annotation IDs & gene names
colnames(l2_genes) = c("ensembl", "gene_name")
rp_annotation = read.table(file=rp_annotation_file, header=TRUE, sep='\t')
# format and combine inputs
rownames(l1_umi) = l1_genes$ensembl
colnames(l1_umi) = l1_barcodes
l1_umi[1:5, 1:5]
rownames(l2_umi) = l2_genes$ensembl
colnames(l2_umi) = l2_barcodes
l2_umi[1:5, 1:5]
l12_genes = l1_genes #l1_genes and l2_genes are equivalent
l12_umi = cbind(l1_umi, l2_umi)
dim(l12_umi) #27998 9603
l12_barcodes = c(l1_barcodes, l2_barcodes)
rm(l1_genes, l2_genes, l1_umi, l2_umi, l1_barcodes, l2_barcodes)
# perform QC as reported in manuscript, hoping to get ~5034 cells for L1, or 9319 between L1+L2 as reported in Table 1 (although not sure if they included all high-quality cells in this table...)
# > 500 total genes
# > 1000 UMIs
# < 5% mitochondrial
l12_total_genes = colSums(l12_umi > 0)
hist(l12_total_genes) # peak around 1000, long tail up to ~6500 genes
range(l12_total_genes) # 604 6549
l12_total_umis = colSums(l12_umi)
hist(l12_total_umis) # very long R side tail
range(l12_total_umis) # 1724 52835 -- now 57585, why?
l12_umi_mito_genes = l12_umi[rownames(l12_umi) %in% mito_genes,]
dim(l12_umi_mito_genes) #13 x 9603
l12_pc_mito = colSums(l12_umi_mito_genes)/l12_total_umis # total mito UMIs / total UMIs
range(l12_pc_mito) # 0.0000000 0.08217405
# some cells are over 5% mitochondrial -- need to remove from l12_umi and barcodes
cells_to_remove = l12_pc_mito > 0.05
sum(cells_to_remove) # only 1 cell to remove?
l12_umi = l12_umi[,!cells_to_remove]
dim(l12_umi) #27998 9602
l12_barcodes = l12_barcodes[!cells_to_remove]
sum(l12_barcodes==colnames(l12_umi))
# moving on to clustering -- not going to try to exactly replicate the clustering methods they used; just going to use the key marker genes they list in Table 1
# need to normalize & log-transform the data to log2(CPM + 1), but to avoid storing another 1.2 Gb matrix in RAM I'll do this after subsetting for the marker genes of interest. according to Table 1, most cells in L1 and L2 are Avd-L, Avp-L, Myo, or Prc
# - Avd-L: Wap, Csn2, Glycam1 and Lalba
# - Avp-L: Wap, Csn2, Glycam1, Lalba, Aldh1a3, Cd14 and Kit
# - Myo: Oxtr, Acta2, Krt4 andKrt14
# - Prc: Procr, Igfbp4, Gng11 and Zeb2
# ^^ these actually did not cluster very nicely...going to use the genes from figure 2 instead
avdl_markers = c("Olah", "Glycam1", "Thrsp", "Fabp3", "Rspo1", "Atp6v1c2", "Csn2", "Wap")
avpl_markers = c("Aldh1a3", "Kit", "Cd14", "Lypd3")
myo_markers = c("Igfbp2", "Oxtr")
prc_markers = c("Notch3", "Zeb2")
all_markers = unique(c(avdl_markers, avpl_markers, myo_markers, prc_markers))
length(all_markers) #16
all_markers %in% l12_genes$gene_name # all true
all_markers_gene_annotation = factor(all_markers, levels=l12_genes$gene_name, labels=l12_genes$ensembl) # checked that the right gene_annotation IDs were paired up w/ the marker genes
# format trimmed UMI matrix
l12_umi_markers = l12_umi[rownames(l12_umi) %in% all_markers_gene_annotation,]
dim(l12_umi_markers) # 16 9602
rownames(l12_umi_markers) = as.vector(factor(rownames(l12_umi_markers), levels=l12_genes$ensembl, labels=l12_genes$gene_name))
# normalize, log transform, scale to 0-1 per gene
l12_umi_markers_heatmap = matrix(data=0, nrow=nrow(l12_umi_markers), ncol=ncol(l12_umi_markers))
rownames(l12_umi_markers_heatmap) = rownames(l12_umi_markers)
colnames(l12_umi_markers_heatmap) = colnames(l12_umi_markers)
for (i in 1:ncol(l12_umi_markers_heatmap)) {
if (sum(l12_umi_markers[,i]) > 0) {
l12_umi_markers_heatmap[,i] = l12_umi_markers[,i]/sum(l12_umi_markers[,i])*1000000
}
}
l12_umi_markers_heatmap = log(l12_umi_markers_heatmap+1, 2)
for (j in 1:nrow(l12_umi_markers_heatmap)) {
if (max(l12_umi_markers_heatmap[j,]) > 0) {
l12_umi_markers_heatmap[j,] = l12_umi_markers_heatmap[j,]/max(l12_umi_markers_heatmap[j,])
}
}
# heatmap.2(l12_umi_markers_heatmap, trace="none")
# heatmap.2(l12_umi_markers_heatmap[,!colMaxs(l12_umi_markers_heatmap)==0], distfun=function(x) as.dist(1-cor(t(x), method="spearman")), trace="none") # have to remove the cells that don't express any of the marker genes
# recall avd markers: "Olah", "Glycam1", "Thrsp", "Fabp3", "Rspo1", "Atp6v1c2", "Csn2", "Wap"
hist(l12_umi_markers_heatmap["Csn2",])
hist(l12_umi_markers_heatmap["Wap",])
hist(l12_umi_markers_heatmap["Fabp3",])
avp_score = colSums(l12_umi_markers_heatmap[c("Aldh1a3", "Kit", "Cd14"),])
hist(avp_score)
avd_score = colSums(l12_umi_markers_heatmap[c("Fabp3", "Thrsp", "Glycam1", "Olah"),])
hist(avd_score)
cell_annotation = data.frame(barcode=l12_barcodes)
cell_annotation$is_avp = avp_score > 1
cell_annotation$is_avd = avd_score > 2
cell_annotation$is_other = !(cell_annotation$is_avp | cell_annotation$is_avd) #9290
table(cell_annotation$is_avp, cell_annotation$is_avd)
table(cell_annotation$is_avp) #220 AVPs
table(cell_annotation$is_avd) #104 AVDs
# 6 overlap between AVPs and AVDs
#        FALSE TRUE
#  FALSE  9290   92
#  TRUE    208   12
# back to raw umi counts -- going to pool the counts for each cell type, then normalize per RP reads
rp_annotation = as.vector(rp_annotation[,"gene.id"]) # use all genes in rp_annotation
rp_annotation = rp_annotation[rp_annotation %in% rownames(l12_umi)] # Rps4y2 wasn't in the dataset
l12_avd_pooled = rowSums(l12_umi[rp_annotation,cell_annotation$is_avd])
l12_avd_pooled = l12_avd_pooled/sum(l12_avd_pooled)*100
rp_annotation_names = as.vector(factor(rp_annotation, levels=l12_genes$ensembl, labels=l12_genes$gene_name))
#  normalize by total UMIs per cell
l12_umi_norm = matrix(data=0, nrow=nrow(l12_umi), ncol=ncol(l12_umi))
rownames(l12_umi_norm) = as.vector(factor(rownames(l12_umi), levels=l12_genes$ensembl, labels=l12_genes$gene_name))
colnames(l12_umi_norm) = colnames(l12_umi)
for (i in 1:ncol(l12_umi_norm)) {
if (sum(l12_umi[,i]) > 0) {
l12_umi_norm[,i] = l12_umi[,i]/sum(l12_umi[,i])*1000000
}
}
# calculate correlations for AVDs: Rps27l normalized umis vs other genes' umis
# calculate correlations based on Rps27l stoichiometry relative to RP genes, rather than normalized UMIs. OK to use l12_umi_norm for this, since the normalizing denominator cancels out anyway. For the other genes, still using normalized UMIs. Also not limiting to AVPs for now
l12_sum_all_rp_transcripts = colSums(l12_umi_norm[rownames(l12_umi_norm) %in% rp_annotation_names,])
l12_rps27l_stoichiometry = l12_umi_norm["Rps27l",]/l12_sum_all_rp_transcripts * 100 #normalized UMI for Rps27l divided by normalized UMI for all active genes
# among only avds
cor_rps27l_stoichiometry_avd = data.frame(gene_name = rownames(l12_umi_norm),
spearman_rho = rep(NA, nrow(l12_umi_norm)),
p_value = rep(NA, nrow(l12_umi_norm)))
for (i in 1:nrow(l12_umi_norm)) {
if (i %% 1000 == 0) {
print(i)
}
if (sum(l12_umi_norm[i,cell_annotation$is_avd]) > 0) {
result = cor.test(l12_rps27l_stoichiometry[cell_annotation$is_avd],
l12_umi_norm[i,cell_annotation$is_avd],
alternative = "two.sided",
method="spearman",
exact = FALSE)
cor_rps27l_stoichiometry_avd[i,] = c(rownames(l12_umi_norm)[i], result$estimate, result$p.value)
}
}
cor_rps27l_stoichiometry_avd$ensembl_id = l12_genes[,'ensembl']
write.csv(cor_rps27l_stoichiometry_avd[!is.na(cor_rps27l_stoichiometry_avd$spearman_rho),], file = file.path(output_dir, "S27L_stoich_correlations_to_norm_umi_spearman.csv"), quote=FALSE)
# scatter plot for genes of interest
ygenes_oi = c("Rps27", "Csn2", "Wap", "Cdkn1a", "Mdm2")
for (ygene in ygenes_oi) {
pdf(file=file.path(output_dir, paste("avd_rps27l_stoich_vs_", ygene, "_norm_umi_spearman", ".pdf", sep="")), width=4, height=4)
df = data.frame(rps27l.stoich=l12_rps27l_stoichiometry[cell_annotation$is_avd], ygene.umi.norm=l12_umi_norm[ygene, cell_annotation$is_avd])
par(pty='s')
plot(x = df$rps27l.stoich,
y = df$ygene.umi.norm,
pch = 19,
xlab="eS27L stoichiometry",
ylab=ygene)
# p0 = ggplot(df, aes(x=rps27l.stoich, y=ygene.umi.norm))
# plot(p0
#      + geom_point()
#      + geom_smooth(method="lm", se=FALSE, fullrange=TRUE, color="gray50")
#      + theme_classic()
#      + theme(legend.position='none'))
dev.off()
}
gc()
rm(list=ls())
### PACKAGES
library(gplots)
library(ggplot2)
library(stats)
library(matrixStats)
library(grDevices)
library(RColorBrewer)
library(dplyr)
library(ggpubr)
### DIRECTORIES
root_dir = "/Users/adelexu/Google Drive/PhD/S27L_manuscript/source_data/analysis_plotting_code"
project_dir = file.path(root_dir, "fu_bulk_mammary")
input_dir = file.path(project_dir, "data")
output_dir = file.path(project_dir, "results")
### INPUT FILES
gene_annotation_file = file.path(input_dir, "gene_annotations_20180615.txt")
# downloaded from Ensembl, restricted to genes w/ NCBI gene IDs, contains gene stable IDs (Ensembl IDs), gene names, NCBI/Entrez gene IDs
rp_annotation_file = file.path(input_dir, "rp_annotation.tsv")
# manually curated
gene_counts_file = file.path(input_dir, "GSE60450_Lactation-GenewiseCounts.txt")
# downloaded from Fu et al 2015 GEO entry
### READ INPUTS
gene_annotation = read.table(file = gene_annotation_file, header=TRUE, sep='\t')
rp_annotation = read.table(file = rp_annotation_file, header=TRUE, sep='\t')
gene_counts = read.table(file = gene_counts_file, header=TRUE, sep='\t')
# truncate gene_annotation to genes present in the dataset
gene_annotation <- gene_annotation[gene_annotation$NCBI.gene.ID %in% gene_counts$EntrezGeneID,]
# examine for duplicated entries in gene_annotation
gene_annotation[duplicated(gene_annotation$NCBI.gene.ID),] #368 duplicated NCBI/Entrez IDs, none of which look particularly important...
sum(duplicated(gene_annotation$Gene.stable.ID)) # 136 duplicated gene_annotation IDs
sum(gene_annotation$NCBI.gene.ID %in% gene_counts$EntrezGeneID) #21280
# check which genes are present in dataset
sum(rp_annotation$gene.id %in% gene_annotation$Gene.stable.ID) # only 87 of the RP genes have an NCBI ID
sum(rp_annotation$gene.name %in% gene_annotation$Gene.name) # again, 87 of the RP genes are in the gene_annotation list by gene name
rp_annotation[!(rp_annotation$gene.id %in% gene_annotation$Gene.stable.ID),] # only Rps4l is not present
# truncate RP annotation to those present in gene annotation
rp_annotation_ncbi <- rp_annotation[rp_annotation$gene.id %in% gene_annotation$Gene.stable.ID,]
table(rp_annotation_ncbi$is.canonical) # all 80 t1 genes present
# truncate gene_annotation to RP genes that also have an NCBI id - results in 92 entries
gene_annotation <- gene_annotation[gene_annotation$Gene.stable.ID %in% rp_annotation_ncbi$gene.id,]
# examine extraneous entries in gene_annotation
gene_annotation[duplicated(gene_annotation$Gene.stable.ID),]
#           Gene.stable.ID Gene.name NCBI.gene.ID
# 3899  ENSMUSG00000047675      Rps8    100040298
# 7544  ENSMUSG00000062006     Rpl34       619547
# 7545  ENSMUSG00000062006     Rpl34    100043876
# 8105  ENSMUSG00000048758     Rpl29       666642
# 14497 ENSMUSG00000041841     Rpl37    100502825
gene_annotation[duplicated(gene_annotation$Gene.name),]
#           Gene.stable.ID Gene.name NCBI.gene.ID
# 3899  ENSMUSG00000047675      Rps8    100040298
# 7544  ENSMUSG00000062006     Rpl34       619547
# 7545  ENSMUSG00000062006     Rpl34    100043876
# 8105  ENSMUSG00000048758     Rpl29       666642
# 14497 ENSMUSG00000041841     Rpl37    100502825
gene_annotation[duplicated(gene_annotation$NCBI.gene.ID),]
#none
sum(gene_annotation$NCBI.gene.ID %in% gene_counts$EntrezGeneID)
# 92 --> all of the entries in the gene_annotation list are in the database, even the redundant ones...
gene_counts$EntrezGeneID <- paste0("ncbi_", gene_counts$EntrezGeneID)
rownames(gene_counts) <- gene_counts$EntrezGeneID
gene_counts$EntrezGeneID <- NULL
gene_counts$Length <- NULL
gene_annotation$NCBI.gene.ID <- paste("ncbi_", gene_annotation$NCBI.gene.ID, sep="")
# Make a counts table truncated to RP genes for easier analysis later
gene_counts_rp <- gene_counts[gene_annotation$NCBI.gene.ID,]
plot(gene_counts_rp$luminal.lactation.d2.1, gene_counts_rp$luminal.lactation.d2.2, main="Raw read counts") # very tightly correlated between replicates...that's good!
# calculate total transcripts, total rp transcripts, S27 counts, S27L counts
gene_counts <- data.matrix(gene_counts)
gene_counts_rp <- data.matrix(gene_counts_rp)
sample_stats <- data.frame(sample.name=colnames(gene_counts))
rownames(sample_stats) <- sample_stats$sample.name
sample_stats$total_counts <- colSums(gene_counts)
sample_stats$total_rp_counts <- colSums(gene_counts_rp)
S27_ncbi <- gene_annotation[gene_annotation$Gene.name=="Rps27","NCBI.gene.ID"]
S27L_ncbi <- gene_annotation[gene_annotation$Gene.name=="Rps27l","NCBI.gene.ID"]
Csn2_ncbi <- "ncbi_12991"
Cdkn1a_ncbi <- "ncbi_12575"
sample_stats$S27_counts <- gene_counts[S27_ncbi,]
sample_stats$S27L_counts <- gene_counts[S27L_ncbi,]
sample_stats$Csn2_counts <- gene_counts[Csn2_ncbi,]
sample_stats$Cdkn1a_counts <- gene_counts[Cdkn1a_ncbi,]
# calculate cpm, stoich, ratio
sample_stats$S27_cpm <- sample_stats$S27_counts/sample_stats$total_counts*1000000
sample_stats$S27L_cpm <- sample_stats$S27L_counts/sample_stats$total_counts*1000000
sample_stats$Csn2_cpm <- sample_stats$Csn2_counts/sample_stats$total_counts*1000000
sample_stats$Cdkn1a_cpm <- sample_stats$Cdkn1a_counts/sample_stats$total_counts*1000000
sample_stats$S27_stoich <- sample_stats$S27_counts/sample_stats$total_rp_counts*100
sample_stats$S27L_stoich <- sample_stats$S27L_counts/sample_stats$total_rp_counts*100
sample_stats$S27L_S27_ratio <- sample_stats$S27L_counts/sample_stats$S27_counts
sample_stats$condition <- sub("\\.[[:digit:]]$", "", sample_stats$sample.name)
sample_stats$condition <- factor(sample_stats$condition, levels=c("basal.virgin",
"basal.pregnant.d18.5",
"basal.lactation.d2",
"luminal.virgin",
"luminal.pregnant.d18.5",
"luminal.lactation.d2"))
sample_stats$cell.type <- c(rep("basal", 6), rep("luminal", 6))
write.csv(sample_stats, file= file.path(output_dir, "2018.11.14.fu.S27L.stats.csv"), quote=FALSE)
sample_stats_luminal = sample_stats[sample_stats$cell.type == "luminal",]
conditions_long = c("luminal.virgin",
"luminal.pregnant.d18.5",
"luminal.lactation.d2")
conditions_for_plot = c("NP", "PD18", "LD2")
sample_stats_luminal$condition_for_plot = factor(sample_stats_luminal$condition,
levels = conditions_long,
labels=conditions_for_plot)
luminal_palette = c("gray50", "#E69F00", "#D55E00")
plot_format = stat_compare_means(ref.group = "NP",
label = "p.signif",
method = "t.test",
size = 5)
# plot for S27
pdf(file = file.path(output_dir, "S27_stoich_luminal.pdf"), height=4, width=2.5)
S27_plot = ggbarplot(sample_stats_luminal,
x = "condition_for_plot", y = "S27_stoich", add = "mean_se",
fill = "condition_for_plot", palette = luminal_palette)
plot(S27_plot
+ plot_format
+ theme(axis.text.x = element_text(angle = 45, hjust=1, vjust=1))
+ geom_point())
dev.off()
# plot for S27L
pdf(file = file.path(output_dir, "S27L_stoich_luminal.pdf"), height=4, width=2.5)
ggbarplot(sample_stats_luminal,
x = "condition_for_plot", y = "S27L_stoich", add = "mean_se",
fill = "condition_for_plot", palette = luminal_palette) + plot_format + theme(axis.text.x = element_text(angle = 45, hjust=1, vjust=1))
dev.off()
luminal_palette = c("gray50", "#E69F00", "#D55E00")
plot_format = stat_compare_means(ref.group = "NP",
label = "p.signif",
method = "t.test",
size = 5)
# plot for S27
pdf(file = file.path(output_dir, "S27_stoich_luminal.pdf"), height=4, width=2.5)
S27_plot = ggbarplot(sample_stats_luminal,
x = "condition_for_plot", y = "S27_stoich", add = "mean_se",
fill = "condition_for_plot", palette = luminal_palette)
plot(S27_plot
+ plot_format
+ theme(axis.text.x = element_text(angle = 45, hjust=1, vjust=1))
+ geom_jitter())
dev.off()
# plot for S27L
pdf(file = file.path(output_dir, "S27L_stoich_luminal.pdf"), height=4, width=2.5)
ggbarplot(sample_stats_luminal,
x = "condition_for_plot", y = "S27L_stoich", add = "mean_se",
fill = "condition_for_plot", palette = luminal_palette) + plot_format + theme(axis.text.x = element_text(angle = 45, hjust=1, vjust=1))
dev.off()
luminal_palette = c("gray50", "#E69F00", "#D55E00")
plot_format = stat_compare_means(ref.group = "NP",
label = "p.signif",
method = "t.test",
size = 5)
# plot for S27
pdf(file = file.path(output_dir, "S27_stoich_luminal.pdf"), height=4, width=2.5)
S27_plot = ggbarplot(sample_stats_luminal,
x = "condition_for_plot", y = "S27_stoich", add = "mean_se",
fill = "condition_for_plot", palette = luminal_palette)
plot(S27_plot
+ plot_format
+ theme(axis.text.x = element_text(angle = 45, hjust=1, vjust=1))
+ geom_jitter(aes(color=NA)))
dev.off()
# plot for S27L
pdf(file = file.path(output_dir, "S27L_stoich_luminal.pdf"), height=4, width=2.5)
ggbarplot(sample_stats_luminal,
x = "condition_for_plot", y = "S27L_stoich", add = "mean_se",
fill = "condition_for_plot", palette = luminal_palette) + plot_format + theme(axis.text.x = element_text(angle = 45, hjust=1, vjust=1))
dev.off()
luminal_palette = c("gray50", "#E69F00", "#D55E00")
plot_format = stat_compare_means(ref.group = "NP",
label = "p.signif",
method = "t.test",
size = 5)
# plot for S27
pdf(file = file.path(output_dir, "S27_stoich_luminal.pdf"), height=4, width=2.5)
S27_plot = ggbarplot(sample_stats_luminal,
x = "condition_for_plot", y = "S27_stoich", add = "mean_se",
fill = "condition_for_plot", palette = luminal_palette)
plot(S27_plot
+ plot_format
+ theme(axis.text.x = element_text(angle = 45, hjust=1, vjust=1))
+ geom_jitter(aes(fill=NA)))
dev.off()
# plot for S27L
pdf(file = file.path(output_dir, "S27L_stoich_luminal.pdf"), height=4, width=2.5)
ggbarplot(sample_stats_luminal,
x = "condition_for_plot", y = "S27L_stoich", add = "mean_se",
fill = "condition_for_plot", palette = luminal_palette) + plot_format + theme(axis.text.x = element_text(angle = 45, hjust=1, vjust=1))
dev.off()
luminal_palette = c("gray50", "#E69F00", "#D55E00")
plot_format = stat_compare_means(ref.group = "NP",
label = "p.signif",
method = "t.test",
size = 5)
# plot for S27
pdf(file = file.path(output_dir, "S27_stoich_luminal.pdf"), height=4, width=2.5)
S27_plot = ggbarplot(sample_stats_luminal,
x = "condition_for_plot", y = "S27_stoich", add = "mean_se",
fill = "condition_for_plot", palette = luminal_palette)
plot(S27_plot
+ plot_format
+ theme(axis.text.x = element_text(angle = 45, hjust=1, vjust=1))
+ geom_jitter())
dev.off()
# plot for S27L
pdf(file = file.path(output_dir, "S27L_stoich_luminal.pdf"), height=4, width=2.5)
ggbarplot(sample_stats_luminal,
x = "condition_for_plot", y = "S27L_stoich", add = "mean_se",
fill = "condition_for_plot", palette = luminal_palette) + plot_format + theme(axis.text.x = element_text(angle = 45, hjust=1, vjust=1))
dev.off()
luminal_palette = c("gray50", "#E69F00", "#D55E00")
plot_format = stat_compare_means(ref.group = "NP",
label = "p.signif",
method = "t.test",
size = 5)
# plot for S27
pdf(file = file.path(output_dir, "S27_stoich_luminal.pdf"), height=4, width=2.5)
S27_plot = ggbarplot(sample_stats_luminal,
x = "condition_for_plot", y = "S27_stoich", add = c("mean_se", "jitter",
fill = "condition_for_plot", palette = luminal_palette)
plot(S27_plot
luminal_palette = c("gray50", "#E69F00", "#D55E00")
plot_format = stat_compare_means(ref.group = "NP",
label = "p.signif",
method = "t.test",
size = 5)
# plot for S27
pdf(file = file.path(output_dir, "S27_stoich_luminal.pdf"), height=4, width=2.5)
S27_plot = ggbarplot(sample_stats_luminal,
x = "condition_for_plot", y = "S27_stoich", add = c("mean_se", "jitter"),
fill = "condition_for_plot", palette = luminal_palette)
plot(S27_plot
+ plot_format
+ theme(axis.text.x = element_text(angle = 45, hjust=1, vjust=1)))
dev.off()
# plot for S27L
pdf(file = file.path(output_dir, "S27L_stoich_luminal.pdf"), height=4, width=2.5)
ggbarplot(sample_stats_luminal,
x = "condition_for_plot", y = "S27L_stoich", add = "mean_se",
fill = "condition_for_plot", palette = luminal_palette) + plot_format + theme(axis.text.x = element_text(angle = 45, hjust=1, vjust=1))
dev.off()
luminal_palette = c("gray50", "#E69F00", "#D55E00")
plot_format = stat_compare_means(ref.group = "NP",
label = "p.signif",
method = "t.test",
size = 5)
# plot for S27
pdf(file = file.path(output_dir, "S27_stoich_luminal.pdf"), height=4, width=2.5)
S27_plot = ggbarplot(sample_stats_luminal,
x = "condition_for_plot", y = "S27_stoich",
add = c("mean_se", "jitter"),
fill = "condition_for_plot", palette = luminal_palette)
plot(S27_plot
+ plot_format
+ theme(axis.text.x = element_text(angle = 45, hjust=1, vjust=1)))
dev.off()
# plot for S27L
pdf(file = file.path(output_dir, "S27L_stoich_luminal.pdf"), height=4, width=2.5)
S27L_plot = ggbarplot(sample_stats_luminal,
x = "condition_for_plot",
y = "S27L_stoich",
add = c("mean_se", "jitter"),
fill = "condition_for_plot", palette = luminal_palette) + plot_format + theme(axis.text.x = element_text(angle = 45, hjust=1, vjust=1))
plot(S27L_plot
+ plot_format
+ theme(axis.text.x = element_text(angle = 45, hjust=1, vjust=1)))
dev.off()
